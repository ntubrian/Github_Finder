import Head from "next/head";
import Image from "next/image";
import styles from "styles/Home.module.css";
import { useState, useEffect, useContext } from "react";
import { getOneUserMeta, getUsers } from "lib/getOneUserMeta";
// import Result from "components/users/Results";
import ShowUsersResult from "components/users/ShowUsersResult";
import { ACTION_TYPES, UserContext } from "context/github-user-context";
import { ACTION_TYPES2, UsersContext } from "context/github-users-context";
import { Input } from "antd";
import { Spin } from "antd";
import { UserOutlined } from "@ant-design/icons";
// import { useRouter } from "next/router";
import useDebounce from "hooks/useDebounce";
import { set } from "nprogress";

export default function Home() {
  const { indexPageState, dispatch } = useContext(UserContext);
  const { usersPageState, dispatchUsers } = useContext(UsersContext);
  const [isSearchingUsers, setSearchUser] = useState(true);
  const [inputUserName, setUserName] = useState(() =>
    isSearchingUsers
      ? usersPageState?.searchUsersInput
      : indexPageState?.inputUserName
  );
  const [returnObj, setReturnObj] = useState("");
  const [loading, setLoading] = useState(false);
  const [debounceTime, setDebounceTime] = useState(1000);
  // const router = useRouter();
  const debounce = useDebounce(inputUserName, debounceTime);
  const handleNameInput = (e) => {
    setUserName(e?.target?.value);
  };
  // console.log(usersPageState.usersMeta.length > 0);
  //  抓取root頁面卡片的user avatar, user login name, user name
  const fetchPicAndName = async () => {
    if (inputUserName === "") {
      setReturnObj("");
    } else {
      if (loading) {
        return;
      }
      setLoading(true);
      // const returnPicAndName = await getOneUserMeta(inputUserName);  暫時停用
      const tryUsers = await getUsers(inputUserName);
      console.log(tryUsers);
      // console.log(usersPageState.usersMeta);
      dispatchUsers({
        type: ACTION_TYPES2.SET_USERS,
        payload: { usersMeta: tryUsers.data.items },
      });
      // console.log("###", usersPageState);
      // console.log("////", returnPicAndName);
      // setReturnObj(returnPicAndName); 暫時停用
      setLoading(false);
    }
  };

  //  偵測使用者打字停止後 700ms 才 call api，原本沒使用每打一個字母就 call 一次
  useEffect(() => {
    if (debounce) {
      fetchPicAndName();
      sessionStorage.setItem("searchUsersInput", inputUserName);
      dispatchUsers({
        type: ACTION_TYPES2.SET_SEARCHUSERSINPUT,
        payload: { searchUsersInput: inputUserName },
      });
    }
  }, [debounce, debounceTime]);

  //  這邊是為了要解決原本使用 debounce 後，
  //  當 input field 上一次有 key in，要查下一筆資料並把 input field 刪光再 key in
  //  會造成圖片先顯示 search icon(預設當 input 為空就顯示) -> 上一次的 data 被 render -> 接著等 api call 回傳資料才 render 本次搜尋
  useEffect(() => {
    if (debounce === "") {
      // setDebounceTime(300);
      setReturnObj("");
      // setUserName("");
      dispatchUsers({
        type: ACTION_TYPES2.SET_USERS,
        payload: { usersMeta: [] },
      });
      console.log("debounce", debounce);
    } else {
      setDebounceTime(1000);
    }
  }, [inputUserName]);

  return (
    <div className="flex flex-col justify-between h-screen">
      <Head>
        <title>Github Finder</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="mx-auto px-0 pb-40 flex flex-col justify-center items-center">
        <div>
          <div className={`${styles.transForm} w-60 mx-auto mb-10 mt-4`}>
            <Input
              placeholder="find user(s)"
              prefix={<UserOutlined />}
              value={inputUserName}
              onChange={handleNameInput}
              size="large"
            />
          </div>

          <div className={`${loading && styles.spinContainer}`}>
            {debounce === "" ? (
              <div className={styles.searchPic}>
                <Image
                  src="/img/search.png"
                  width={230}
                  height={230}
                  className={styles.transForm}
                ></Image>
              </div>
            ) : loading ? (
              <Spin size="large" />
            ) : usersPageState.usersMeta.length > 0 ? (
              <div className="grid grid-cols-1 gap-8 xl:grid-cols-5 lg:grid-cols-3 md:grid-cols-2">
                {usersPageState.usersMeta.map((user) => (
                  <ShowUsersResult
                    href={`users/${user.login}/repos`}
                    inputUserName={user.login}
                    meta={user}
                    debounce={debounce}
                    key={user.id}
                  ></ShowUsersResult>
                ))}
              </div>
            ) : (
              <>
                <Image src="/img/no_data.png" width={260} height={260}></Image>
                <h1 className={styles.noData}>No data！</h1>
              </>
            )}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
