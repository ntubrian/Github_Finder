import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useContext } from "react";
import { getOneUserMeta } from "../lib/getOneUserMeta";
import Result from "../components/Results";
import { ACTION_TYPES, UserContext } from "../context/github-user-context";
import { Input } from "antd";
import { Spin } from "antd";
import { UserOutlined } from "@ant-design/icons";
// import { useRouter } from "next/router";
import useDebounce from "../hooks/useDebounce";

export default function Home() {
  const { indexPageState, dispatch } = useContext(UserContext);
  const [inputUserName, setUserName] = useState(() =>
    indexPageState?.inputUserName ? indexPageState.inputUserName : ""
  );
  const [returnObj, setReturnObj] = useState("");
  const [loading, setLoading] = useState(false);
  const [debounceTime, setDebounceTime] = useState(0);
  // const router = useRouter();
  const debounce = useDebounce(inputUserName, debounceTime);
  const handleNameInput = (e) => {
    setUserName(e?.target?.value);
  };

  //  抓取root頁面卡片的user avatar, user login name, user name
  const fetchPicAndName = async () => {
    if (inputUserName === "") {
      setReturnObj("");
    } else {
      if (loading) {
        return;
      }
      setLoading(true);
      const returnPicAndName = await getOneUserMeta(inputUserName);
      console.log(returnPicAndName);
      setReturnObj(returnPicAndName);
      setLoading(false);
    }
  };

  //  偵測使用者打字停止後 700ms 才 call api，原本沒使用每打一個字母就 call 一次
  useEffect(() => {
    if (debounce) {
      fetchPicAndName();
    }
  }, [debounce, debounceTime]);

  //  這邊是為了要解決原本使用 debounce 後，
  //  當 input field 上一次有 key in，要查下一筆資料並把 input field 刪光再 key in
  //  會造成圖片先顯示 search icon(預設當 input 為空就顯示) -> 上一次的 data 被 render -> 接著等 api call 回傳資料才 render 本次搜尋
  useEffect(() => {
    if (inputUserName === "") {
      setDebounceTime(0);
      console.log(0);
      setReturnObj("");
      setUserName("");
      console.log("HI");
    } else {
      console.log(700);
      setDebounceTime(700);
    }
  }, [inputUserName]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Dcard F2E</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.transForm}>
          <div className={styles.inputBox}>
            <Input
              placeholder="find a user"
              prefix={<UserOutlined />}
              value={inputUserName}
              onChange={handleNameInput}
              size="large"
            />
          </div>

          <div
            className={`${styles.resultCardContainer} ${
              loading && styles.spinContainer
            }`}
          >
            {inputUserName === "" ? (
              <div className={styles.searchPic}>
                <Image src="/img/search.png" width={230} height={230}></Image>
              </div>
            ) : loading ? (
              <Spin size="large" />
            ) : (
              <Result
                href={`users/${inputUserName}/repos`}
                inputUserName={inputUserName}
                meta={returnObj}
                debounce={debounce}
              ></Result>
            )}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
