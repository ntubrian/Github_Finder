import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useContext } from "react";
import { getOneUserMeta } from "../lib/getOneUserMeta";
import Result from "../components/Results";
import { ACTION_TYPES, UserContext } from "../pages/_app";
import { Input } from "antd";
import { Spin } from "antd";
import { UserOutlined } from "@ant-design/icons";
import { useRouter } from "next/router";

export default function Home() {
  const [inputUserName, setUserName] = useState("");
  const [returnObj, setReturnObj] = useState("");
  const [loading, setLoading] = useState(false);
  const { indexPageState, dispatch } = useContext(UserContext);
  const router = useRouter();
  // const [trys, setTry] = useState("");
  const handleNameInput = (e) => {
    setUserName(e.target.value);
  };

  // const octokit = new Octokit({
  //   auth: `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`,
  // });
  // useEffect(() => {
  //   const trytry = async () => {
  //     try {
  //       const res = await octokit.request("GET /users");
  //       setTry(trys);
  //     } catch (error) {
  //       console.error("Some thing wrong");
  //     }
  //   };
  //   console.log(trys);
  //   trytry();
  // }, [userName]);

  const examineUndefined = (meta) => {
    if (typeof meta !== "undefined" && typeof meta.data !== "undefined") {
      return true;
    }
    return false;
  };

  useEffect(() => {
    console.log(returnObj);
    const fetchPicAndName = async () => {
      if (inputUserName === "") {
        setReturnObj("");
      } else {
        if (loading) {
          return;
        }
        setLoading(true);
        const returnPicAndName = await getOneUserMeta(inputUserName);
        console.log(returnPicAndName);
        setReturnObj(returnPicAndName);
        setLoading(false);
      }
    };
    if (examineUndefined(returnObj)) {
    }

    fetchPicAndName();
  }, [inputUserName]);

  useEffect(() => {
    setUserName(indexPageState.inputUserName);
  }, [router]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {/* <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div> */}
        <div className={styles.transForm}>
          {/* <input
            type="text"
            placeholder="name"
            value={userName}
            onChange={handleNameInput}
          /> */}
          <Input
            placeholder="find a user"
            prefix={<UserOutlined />}
            value={inputUserName}
            onChange={handleNameInput}
          />

          {/* {typeof returnObj !== "undefined" &&
          typeof returnObj.data !== "undefined" &&
          typeof returnObj.data[0] !== "undefined" &&
          typeof returnObj.data[0].id !== "undefined"
            ? <span>returnObj.data[0].id</span> && (
                <img src={`${returnObj.data[0].owner.avatar_url}`} />
              )
            : "no data"} */}

          {/* {typeof returnObj !== "undefined" &&
          typeof returnObj.data !== "undefined" ? (
            <div>
              <p>{returnObj.data.name}</p>
              <img src={returnObj.data.avatar_url} />
            </div>
          ) : (
            "no data"
          )} */}
          <div
            className={`${styles.resultCardContainer} ${
              loading && styles.spinContainer
            }`}
          >
            {loading ? (
              <Spin size="large" />
            ) : (
              <Result
                href={`users/${inputUserName}/repos`}
                input={inputUserName}
                meta={returnObj}
              ></Result>
            )}
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
